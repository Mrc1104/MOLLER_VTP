-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Find_block is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    ch_V : IN STD_LOGIC_VECTOR (7 downto 0);
    dim_V : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of Find_block is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal block_map_nx_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_map_nx_V_ce0 : STD_LOGIC;
    signal block_map_nx_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_map_ny_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_map_ny_V_ce0 : STD_LOGIC;
    signal block_map_ny_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dim_V_read_reg_73 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8278_cast_fu_54_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal agg_result_V_fu_64_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_V_fu_64_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component ecal_cluster_hls_mux_21_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Find_block_block_map_nx_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Find_block_block_map_ny_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    block_map_nx_V_U : component Find_block_block_map_nx_V
    generic map (
        DataWidth => 5,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_map_nx_V_address0,
        ce0 => block_map_nx_V_ce0,
        q0 => block_map_nx_V_q0);

    block_map_ny_V_U : component Find_block_block_map_ny_V
    generic map (
        DataWidth => 4,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_map_ny_V_address0,
        ce0 => block_map_ny_V_ce0,
        q0 => block_map_ny_V_q0);

    ecal_cluster_hls_mux_21_5_1_1_U1 : component ecal_cluster_hls_mux_21_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 1,
        dout_WIDTH => 5)
    port map (
        din0 => block_map_nx_V_q0,
        din1 => agg_result_V_fu_64_p2,
        din2 => dim_V_read_reg_73,
        dout => agg_result_V_fu_64_p4);





    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                dim_V_read_reg_73 <= dim_V;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm, ap_CS_iter1_fsm_state0, ap_CS_iter1_fsm_state2, ap_ce)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, ap_CS_iter1_fsm_state0, ap_CS_iter1_fsm_state2, ap_ce)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                elsif (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state1) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce)))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;
    agg_result_V_fu_64_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(block_map_ny_V_q0),5));
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_iter1_fsm_state2, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= agg_result_V_fu_64_p4;
    block_map_nx_V_address0 <= tmp_8278_cast_fu_54_p1(8 - 1 downto 0);

    block_map_nx_V_ce0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            block_map_nx_V_ce0 <= ap_const_logic_1;
        else 
            block_map_nx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_map_ny_V_address0 <= tmp_8278_cast_fu_54_p1(8 - 1 downto 0);

    block_map_ny_V_ce0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            block_map_ny_V_ce0 <= ap_const_logic_1;
        else 
            block_map_ny_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8278_cast_fu_54_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_V),64));
end behav;
